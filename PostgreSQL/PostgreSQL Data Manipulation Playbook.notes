START 9:32PM 2020.12.15
- 2 Understanding SQL Sublanguages:
    - Verbose categorization scheme
        - Data definition language (DDL)
            - Statements (CREATE ALTER DROP)
            - Object (DATABASE, SCHEMA, TABLE, TRIGGER, PROCEDURE, FUNCTION, INDEX, etc.)
        - Data Control language (DCL)
            - Helps manage security
            - Statements (GRANT, REVOKE)
            - Permissions (SELECT, INSERT, UPDATE, DELETE, CREATE, ALL)
            - OBJECT (ON, (object))
            - ROLE (TO, FROM), (PUBLIC, CURRENT_USER, SESSION_USER)
            - EX:
            [sql]
                GRANT SELECT ON Orders TO PUBLIC;
                GRANT ALL ON Orders TO Administrators;
            [end]
        - Data Query language (DQL)
            - Sublanguages used to return data to the client
            - RETURNING, SELECT,
        - Data Manipulation language (DML)
            - Main focus of course
            - Sometimes contains SELECT (not here)
            - INSERT, UPDATE, DELETE
        - Data Transaction language (DTL)
            - BEGIN | START (synonomous)
            - WORK | TRANSACTION (synonomous)
            - SAVEPOINT (save state)
            - COMMIT or ROLLBACK
    - Imperative Constructs
        - Programming Paradigms
            - Declarative (WHAT)
                - Programmer declars properties of the desired result, not how to compute it
            - Imperative (HOW)
                - Programmer tells machine how to change its state
        - Imperative
            - Flow control - cases, loops, continue/exit, GOTO, etc.
            - Variables - DECLARE
            - Error handling - RAISE NOTICE, EXCEPTION, WHENEVER
            - Management - SET, backups, replication, stats, VACUUM?
- 3 What Are Concurrency Challenges?:
    - ACID Properties Guarantees
        - Atomicity - Indivisible and irreducible series of database operations
        - Consistency - Changes to the database allowed from one valid state to another
        - Isolation - when and how changes become visible to others
            - Pessimistic - assume there will be conflicts, so take measures to prevent it
            - Optimistic - Assume conflicts are rare, but require validity check before committing
        - Durability - Committed changes survive permanently
- 4 Understanding ANSI Concurrency Phenomena:
    - Lost Update - If two transaction overlap updating the same data
        - Not possible in PostgreSQL
    - Dirty Read - A read occurs during a write transaction that is later rolled back
        - Prevented by isolated trsactions (cannot happen in PostgreSQL)
    - Non-repeatable read - The state of data changes while work is being done
        - i.e. a salary changes while payroll is being processed
    - Phantom rows - Rows appear in sequential SELECTS if work is done by another thread.
END 10:10pm
START 8:52pm 2020.12.16
- 5 How ANSI Isolation levels Solve Concurrency Challenges:
    - READ UNCOMMITTED:
        - All concurrency phenomena are permitted
            - Dirty reads, non-repeatable reads, phantom rows
        - Not supported in PostgreSQL
    - READ COMMITTED:
        - Prevents dirty reads, NRR and Phantom rows are still permitted
        - Supported in PostgreSQL
        - A snapshot is created per READ
    - REPEATABLE READ:
        - Prevents dirty reads and non-repeatable reads, phantom rows are still permitted
        - Snapshot is created at the first read in a transaction, persists until transaction is committed.
    - Restrictive Isolation Levels:
        - The more restrictive the isolation level, the more expensive in terms of concurrency and performance
        - Read uncommitted (least expensive_) to serializable (most expensive)
    - SERIALIZABLE:
        - Most restrictive, most isolated
        - Prevents all three phenomena above
        - Serialization anomalies - out of scope of the course
    - Takeaways:
        - Isolation strategy is a crucial part of app design and will have a detrimental impact on data Consistency
        - Different areas of an app have different isolation requirements
END 9:05pm
START 10:40pm 2020.12.16
- 6 Using Transaction Control language:
    - COMMIT, COMMIT WORK, COMMIT TRANSACTION - all the same
    - ROLLBACK, "", "" - similarly synonomous
    - Cannot nest transactions, if attempted the inner transaction is ignored, and a warning is flagged
    - Set session characteristics before beginning a transaction
    - Transaction save points
        - Keyword SAVEPOINT <name>
        - ROLLBACK TO SAVEPOINT <name> - rolls back to given points
    - DDL statements are fully transactional (for the most part)
    - SHOW transaction_isolation; - reads out the current isolation level;
- 7 Inserting Data with the INSERT Statement:
    - Insert syntax - INSERT INTO - mandatory for Postgres, not fully mandatory in other languages
    - The VALUES () can be replaced by a SELECT expression that satisfies the column count of the table
    - Two types of DEFAULTS
        - Serial and Sequence types
        - DEFAULT constraint
    - OVERRIDING { SYSTEM | USER } VALUE - can be used to overrule a default value
        - EX:
        [sql]
            INSERT INTO T (Identity_Column, Unique_Column, Constraint_Column)
            OVERRIDING SYSTEM VALUE
            VALUES (12, 7, 7);
        [end]
        Allows for 12 to be inserted overriding the serial incrementer.
    - Can also use DEFAULT keyword in VALUE ( ) to explicitly use the default value
    - Insert through a view:
        - PostgreSQL doesn't allow INSERT into a CTE
        - Updateable views:
            - Must not contain
                - More than one table or updateable view in FROM
                - WITH, DISTINCT, GROUP BY, HAVING, LIMIT, or OFFSET clauses
                - UNION, INTERSECT, or EXCEPT
                - Aggregates, window functions or set-returning functions in the SELECT list
    - Handling Contraint Conflicts:
        - ON CONFLICT [ (if not DO NOTHING) Constraint definition] { DO NOTHING | DO UPDATE SET ... }
        - EX:
            [sql]
                INSERT INTO T (Unique_Column, Constraint_Column)
                VALUES (300, 999),
                       (500, 999)
                ON CONFLICT (Unique_Column)
                DO UPDATE SET Constraint_Column = EXCLUDED.Constraint_Column;
            [end]
    - Using RETURNING:
        - Auditing example:
            [sql]
                WITH INSERT_CTE AS
                (
                    INSERT INTO T (Unique_Column, Constraint_Column)
                    VALUES (300, 999),
                       (500, 999)
                    ON CONFLICT (Unique_Column)
                    DO UPDATE SET Constraint_Column = EXCLUDED.Constraint_Column;
                    RETURNING *
                )
                SELECT *, NOW() AS InsertTime, current_user AS InsertUser
                INTO audit_table
                FROM INSERT_CTE;
            [end]
STOP 11:16pm
START 10:23pm 2020.12.17
- 8 Using the UPDATE Statement:
    - Can use RETURNING from UPDATE statements
    - Can set values to the result of a non-correlated subquery
    - Using FROM in UPDATE helps defined the scope of the update when joining across tables
    [sql]
        UPDATE Orders AS O1
        SET OrderDate = CASE
                            WHEN E.Salary >= 50000 THEN OrderDate + 1
                            WHEN E.Salary <= 49000 THEN OrderDate - 1
                        END
        FROM Employees AS E
        WHERE E.Employee = O1.Employee
            AND (E.Salary >= 50000 OR E.Salary <= 49000);
    [end]
    - A View can be a target of an UPDATE
        - UPDATE View_Name <same as usual>
- 9 Deleting Data Using the DELETE Statement:
    - DELETE FROM [ ONLY ] Table [ * ] [ [AS] alias]
      [ USING Using_List ] (used to help define scope of the DELETE when joining across tables)
      WHERE Predicate
      [ RETURNING ] * 
    - Using a cursor with DELETE: (avoid unless necessary)
    [sql]
        DECLARE MyCursor CURSOR
        FOR
        SELECT * FROM Orders
        WHERE Employee IN (SELECT Employee FROM Employees WHERE Salary < 50000)
        FOR UPDATE;

        FETCH FIRST FROM MyCursor;

        DELETE FROM Orders
        WHERE CURRENT OF MyCursor;

        FETCH NEXT FROM MyCursor;
        ...
    [end]
    - Can use DELETE with views, just use the name of a view instead of the name of a table in statement
    - Can return from a DELETE, useful for archiving, auditing, moving data between tables
        - Technically performs two operations, a delete and a select
END 10:44pm
START 10:40pm 2020.12.18
- 10 Performing Bulk Deletes:
    - TRUNCATE - CASCADE truncates any related FK tables
        - Truncate is faster than delete
        - Reclaims used space immediately
        - Not MVCC safe
    - Ways to delete all table rows:
        - DELETE
            - Row by row
            - Cascading w/ foreign key provided
            - No side effects
        - TRUNCATE
            - All at once
            - Explicit Cascading with CASCADE keyword - truncates related tables
            - Explicit IDENTITY control
        - DROP TABLE
            - All at once
            - No Cascading
            - Everything is gone
        - Large DELETE Optimizatinos 
            - Batching
            - Partitioning
                - Partitions live beneath the "logical table" that applications interact with
            - Moving data out
                - Copy just the rows we need to keep to new table, then drop the old table
                    - Can also truncate old table, then move data in new table back
        - Truncates can be rolled back if they occur in a transaction
        - VACUUM - reclaims space that is "empty"
        - Partition delete EX:
        [sql]
            ... <create table with Key_Column identity column> ...
            PARTITION BY RANGE (Key_Column);
            CREATE TABLE Large_Delete_Parition1
            PARTITION OF Large_Delete_Partitioned
            FOR VALUES FROM (0) TO (1000000)
        [end]
START: 12:20pm 2020.12.19
- 11 Course Review and Wrap Up:
    - Take aways:
        - Concurrency and isolation are serious and complex challenges for relational database management systems
            - Need to get this correct up front
        - Modifying data can be expensive, but is manageable
            - Don't focus architecture around imaginary performance scenarios
        - SQL is declarative, composable, and flexible - 50 years of use, not common in tech!
    - 50% of info is lost 1 hour after getting it, 75% within 24 hours, 90% within the week?
END: 12:33pm

2021.01.26 - Revisited the postgres tutorials/notes for CTE and bulk insert info.