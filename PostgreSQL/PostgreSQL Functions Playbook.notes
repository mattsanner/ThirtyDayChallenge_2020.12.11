START: 12:32pm 2020.12.19
- 2 Introducing Built In Functions in PostgreSQL
    - The most important functions have become part of the ANSI standard that ANSI-compliant DBs have to support
    - TODO: set up docker with test database
STOP: 12:45pm
START: 10:12pm 2020.12.20
- Finished setup of test DB
- 3 Understanding Data Types:
    - ANSI SQL Data types
        - Character, Binary, Numeric (exact, approximate), Date/time types, boolean, array
    - Special PostgreSQL types
        - UUID, XML (ANSI 2013), JSON (ANSI 2016)
        - Many others listed, should get to them if relevant
    - ::<TYPE> - cast
    - TEXT - PostgreSQL extension to character types
    - Numerics
        - Integers (smallint, int(4), bigint)
        - Arbitrary Precision Numbers (exact) (NUMERIC, DECIMAL)
        - Floating Point Types (approximate) (FLOAT4, FLOAT8, FLOAT(n))
        - Monetary Types (exact) - MONEY
    - Date, Time, Interval Types
        - timestamps w/ and w/o TZ - two different flavores
        - INTERVAL - gap between to timestamps
        - DATE and TIME separately
    - Boolean
        - NULL:BOOL = "Unknown"
    - Array
        - <type>[][]...
        - 1 based arrays
    - UUID
        - 128 bit value
        - 10^-37 -> chance of collision
        - Can adjust groupings
    - XML
        - Built in XML validation for valid XML string
        - SELECT XML "<xml string>" automatically casts
    - JSON types
        - JSON, JSONB (B for binary format, faster performance, indexable)
    - Range types
        - INT4RANGE, INT8RANGE, TSRANGE, etc.
STOP: 10:40pm
START: 11:40pm 12.21.2020
- 4 Doing Math with Operators and Functions:
    - Math Operators:
        - Operators were covered in an earlier module
        - ||/ - cube root, ! - factorial
        - A number of binary operators exist as well (&, |, #, etc)
    - Scalar Functions:
        - LOG(2, 8) - logarithm
        - LN(42) - natural logarithm
        - FLOOR, CEIL, DEGREES, RADIANS, etc.
        - SETSEED(), RANDOM() -> random number
        - WIDTH_BUCKET(valueToBucket, startRange, endRange, numberOfBuckets);
    - Trigonometric Functions:
        - SIN, COS, TAN, arc counterparts lead with a
        - SIND, COSD, COTD, TAND - trig functions w/ degress parameters
    - Aggregate functions: already covered
    - Statistical Analysis: 18 stat functions supported - variance, correlation, standard deviance, etc.
        - Ordered set aggregation functions also exist
    - Formatting functions:
        - TO_NUMBER('1,000', '9,999')::INT - first parameter is string to parse, second is format string
            - 'SL' - locale based money symbol
            - 'D' - locale based comma
        - TO_CHAR() - converts number to formatted string
STOP: 11:59PM :)
START: 9:40pm 2020.12.22
- 5 Handling Character Data with String Functions and Operators:
    - Using ANSI Functions and Operators:
        - || - character concat
            - Non character values are coerced to characters if possible
        - CHAR_LENGTH - length in characters, also LENGTH()
        - POSITION(string_to_find IN string_containing)
    - Using PostgreSQL Extensions:
        - LTRIM, RTRIM, LPAD, RPAD - trim and pad extensions
    - Aggregating textual data:
        - Lots to see here, specific to use cases though.
    - Pattern Matching:
        - LIKE 'S%; - S then any characters
        - LIKE '_r%'; - starting with one character, r, any characters
        - Full posix regex is not supported, but large subset is
        - Negate pattern matching - NOT SIMILAR TO
    - Matching Using Regular Expression:
        - REGEXP_MATCH() - returns array of substring matches
        - REGEXP_MATCHES() - returns a set of arrays of matches
        - REGEXP_REPLACE() - matches then replaces a given string
        - REGEXP_SPLIT_TO_ARRAY() - returns array of split strings
        - REGEXP_SPLIT_TO_TABLE() - returns table of matches, one row per match
    - Searching Natural Language Documents:
        - Lots of text search operators - need to dig deeper in to examples to really understand what is going on here
    - Converting and Formatting Functions:
        - CONVERT(string_to_convert, source_encoding, destination_Encoding) - converts string from source to destination encoding
            - CONVERT_FROM(), CONVER_TO() are subsets of this
        - FORMAT(placeholder_string, any, number, of, strings_to_pass_in)
            - Format of specifiers - %[arg_position][flags][width]type
                - Flag and width must be used together
                - type: s for text, I format argument as SQL identifier, L for SQL literal
STOP: 10:00pm