START: 12:32pm 2020.12.19
- 2 Introducing Built In Functions in PostgreSQL
    - The most important functions have become part of the ANSI standard that ANSI-compliant DBs have to support
    - TODO: set up docker with test database
STOP: 12:45pm
START: 10:12pm 2020.12.20
- Finished setup of test DB
- 3 Understanding Data Types:
    - ANSI SQL Data types
        - Character, Binary, Numeric (exact, approximate), Date/time types, boolean, array
    - Special PostgreSQL types
        - UUID, XML (ANSI 2013), JSON (ANSI 2016)
        - Many others listed, should get to them if relevant
    - ::<TYPE> - cast
    - TEXT - PostgreSQL extension to character types
    - Numerics
        - Integers (smallint, int(4), bigint)
        - Arbitrary Precision Numbers (exact) (NUMERIC, DECIMAL)
        - Floating Point Types (approximate) (FLOAT4, FLOAT8, FLOAT(n))
        - Monetary Types (exact) - MONEY
    - Date, Time, Interval Types
        - timestamps w/ and w/o TZ - two different flavores
        - INTERVAL - gap between to timestamps
        - DATE and TIME separately
    - Boolean
        - NULL:BOOL = "Unknown"
    - Array
        - <type>[][]...
        - 1 based arrays
    - UUID
        - 128 bit value
        - 10^-37 -> chance of collision
        - Can adjust groupings
    - XML
        - Built in XML validation for valid XML string
        - SELECT XML "<xml string>" automatically casts
    - JSON types
        - JSON, JSONB (B for binary format, faster performance, indexable)
    - Range types
        - INT4RANGE, INT8RANGE, TSRANGE, etc.
STOP: 10:40pm
START: 11:40pm 12.21.2020
- 4 Doing Math with Operators and Functions:
    - Math Operators:
        - Operators were covered in an earlier module
        - ||/ - cube root, ! - factorial
        - A number of binary operators exist as well (&, |, #, etc)
    - Scalar Functions:
        - LOG(2, 8) - logarithm
        - LN(42) - natural logarithm
        - FLOOR, CEIL, DEGREES, RADIANS, etc.
        - SETSEED(), RANDOM() -> random number
        - WIDTH_BUCKET(valueToBucket, startRange, endRange, numberOfBuckets);
    - Trigonometric Functions:
        - SIN, COS, TAN, arc counterparts lead with a
        - SIND, COSD, COTD, TAND - trig functions w/ degress parameters
    - Aggregate functions: already covered
    - Statistical Analysis: 18 stat functions supported - variance, correlation, standard deviance, etc.
        - Ordered set aggregation functions also exist
    - Formatting functions:
        - TO_NUMBER('1,000', '9,999')::INT - first parameter is string to parse, second is format string
            - 'SL' - locale based money symbol
            - 'D' - locale based comma
        - TO_CHAR() - converts number to formatted string
STOP: 11:59PM :)
START: 9:40pm 2020.12.22
- 5 Handling Character Data with String Functions and Operators:
    - Using ANSI Functions and Operators:
        - || - character concat
            - Non character values are coerced to characters if possible
        - CHAR_LENGTH - length in characters, also LENGTH()
        - POSITION(string_to_find IN string_containing)
    - Using PostgreSQL Extensions:
        - LTRIM, RTRIM, LPAD, RPAD - trim and pad extensions
    - Aggregating textual data:
        - Lots to see here, specific to use cases though.
    - Pattern Matching:
        - LIKE 'S%; - S then any characters
        - LIKE '_r%'; - starting with one character, r, any characters
        - Full posix regex is not supported, but large subset is
        - Negate pattern matching - NOT SIMILAR TO
    - Matching Using Regular Expression:
        - REGEXP_MATCH() - returns array of substring matches
        - REGEXP_MATCHES() - returns a set of arrays of matches
        - REGEXP_REPLACE() - matches then replaces a given string
        - REGEXP_SPLIT_TO_ARRAY() - returns array of split strings
        - REGEXP_SPLIT_TO_TABLE() - returns table of matches, one row per match
    - Searching Natural Language Documents:
        - Lots of text search operators - need to dig deeper in to examples to really understand what is going on here
    - Converting and Formatting Functions:
        - CONVERT(string_to_convert, source_encoding, destination_Encoding) - converts string from source to destination encoding
            - CONVERT_FROM(), CONVER_TO() are subsets of this
        - FORMAT(placeholder_string, any, number, of, strings_to_pass_in)
            - Format of specifiers - %[arg_position][flags][width]type
                - Flag and width must be used together
                - type: s for text, I format argument as SQL identifier, L for SQL literal
STOP: 10:00pm
START: 8:32pm 2020.12.25
- 6 Time Travel with Date and Time Functions:
    - MAKE_DATE, MAKE_TIME, MAKE_TIMESTAMP - all functions to parse a date/time from parameterized pieces
    - DATE_PART('field', source);
        - Fields - Millienium, century, decade, year, quarter, month.. etc.
    - EX:
    [sql]
        SELECT
            DATE '20190301' + 13 AS "pi day, 2019" - 2019-03-14
            '20190328'::DATE - 13 - 2019-03-15
            TIME '23:59:59' + INTERVAL '1 SECOND' - 00:00:00

    [end]
    - EPOCHS - 
    [sql]
        SELECT
            EXTRACT(EPOCH FROM TIMESTAMPTZ '2019-12-28 15:03:10.50-01:00') -
            EXTRACT(EPOCH FROM TIMESTAMPTZ '2019-09-28 09:05:20.50+01:00')
    [end]
    - results in 7891070.0
    - Formatting timestamps
    [sql]
        SELECT
            CURRENT_TIMESTAMP,
            TO_CHAR('2019-10-7T11:55:55-4:00'::TIMESTAMPTZ, 'FMMonth DDth YYYY hh:mm:ss tz');
    [end] 
        - October 07th 2019 03:10:15 utc
STOP 8:47pm 
START 10:47am 2020.12.26
    - Tried out a number of examples:
    [sql]
        SELECT orderid, prod_id, quantity,
        SUM(quantity) OVER (PARTITION BY orderid ORDER BY prod_id
            ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) as "Default frame",
        SUM(quantity) OVER(PARTITION BY orderid ORDER BY prod_id
            ROWS 2 PRECEDING) as "2 preceding",
        SUM(quantity) OVER(PARTITION BY orderid ORDER BY prod_id
            ROWS BETWEEN CURRENT ROW AND 2 FOLLOWING) AS "2 following",
        SUM(quantity) OVER(PARTITION BY orderid ORDER BY prod_id
            ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS "Entire window"
        FROM orderlines
        WHERE orderid = 1
        LIMIT 5;
    [end]
    - window_function
    [sql]
        SELECT
            window_function(exp1, exp2, ...)
                FILTER (WHERE filter_clause)
                OVER(
                    PARTITION BY exp1, exp2, ...
                    ORDER BY exp1, exp2, ...
                    { RANGE | ROWS | GROUPS }
                        {
                            frame_start | frame_start frame_exclusion
                            | BETWEEN frame_start and frame_end
                            | BETWEEN frame_start and frame_end frame_exclusion
                        }
                )
        frame_start and frame_end:
            UNBOUNDED PRECEDING
            offset PRECEDING
            CURRENT ROW
            offset FOLLOWING
            UNBOUNDED FOLLOWING
        
        frame_exclusion:
            EXCLUDE { CURRENT_ROW | GROUP | TIES | NO OTHERS }
    [end]
    - Can declare window usages in SELECT -  big example with VALUES defined:
    [sql]
    SELECT a, n,
        LAG(n) OVER w1 AS "Previous row",
        LEAD(n) OVER w1 AS "Next row",
        LAG(n, 2) OVER w2 AS "Lag by 2, DESC",
        LEAD(n, 2, 42) OVER w2 AS "Default value",
        FIRST_VALUE(n) OVER w1,
        LAST_VALUE(n) OVER w1,
        NTH_VALUE(n, 2) OVER w2 AS "2nd from end",
        ROW_NUMBER() OVER w1 AS "rn"
    FROM (VALUES('a', 1), ('a',2), ('b',1), ('b', 2), ('b', 3)) v(a,n)
    WINDOW
        w1 AS (PARTITION BY a ORDER BY n ASC),
        w2 AS (PARTITION BY a ORDER BY n DESC)
    ORDER BY a, n;
    [end]
STOP: 11:15am

START: 2020.12.29 3:54pm
- 8 Controlling Results with Subquery and Conditional Functions:
    - EXISTS Function:
        - Returns true if subquery returns any result
        - Stops whenever the first match is found
        - NOT EXISTS is equivalent to LEFT JOIN, but more efficient.
    - IN Function:
        - Equivalent to an INNER JOIN, but more efficient (may not have to execute across the full dataset)
        - In PostgreSQL null != null and nothing != null
    - ANY Function:
        - (aka some, aggregates OR to compare the condition to each row until one is true)
    - ALL Function:
        - &&s together comparison of a conditional to each row
        - Same as NOT IN
- 9 Using Array and Range Functions:
    - Constructing Arrays and Ranges:
        - range_type (lower bound, upper bound, open_closed) - open_closed = '[]', '[)', '(]', '()'
            - [ - closed, ( - open
        - Ranges can be open/closed and only hold boundary values, arrays are not
        - Creating an array
        [sql]
        CREATE TEMP TABLE a_table(a TEXT []);
        INSERT INTO a_table VALUES('{a, b, c}');
        SELECT * FROM a_table;
        [end]
    - Using Operators on Ranges:
        - Inclusion operators - @>, <@, && 
            -  Contains, contained by, overlaps
        - Range operators - << >> &< &> -|- + * - 
            - Strictly left, strictly right, does not extend to right of, does not extend to left of, adjacent to, union, intersection, difference
        - || concats arrays
    - Range and array functions:
        - Lots of functions to use to create arrays, find items within an array, same for Ranges
STOP: 4:17pm
START: 2021.1.1 11:21 59PM
- 10 Metadata:
    - Worked through exapmles on test database
STOP: 11:31pm
START: 2021.1.2 Committing to 1 extra hour in the next week for today
STOP: 2021.1.2
START: 2021.1.3 9:00pm
- Finished review for last course. Browsing other PostgreSQL modules/other options
STOP: 2021.1.3 9:11pm